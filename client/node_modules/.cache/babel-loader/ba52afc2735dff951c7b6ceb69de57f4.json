{"ast":null,"code":"var _jsxFileName = \"/Users/kevii/Desktop/memeApp/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [meme, setMeme] = useState([]);\n  const [currentMeme, setCurrentMeme] = useState(2);\n  const [nextMeme, setNextMeme] = useState(currentMeme + 1);\n  const [seconds, setSeconds] = useState(15);\n  const [displayCurrent, setDisplayCurrent] = useState(true);\n  const [length, setLength] = useState();\n  const CLOCK = 15;\n  const WEEK_IN_MS = 604800000;\n  const TEN_MIN_IN_MS = 600000;\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      if (seconds !== 0) {\n        setSeconds(seconds - 1);\n      } else {\n        if (displayCurrent) {\n          setDisplayCurrent(false);\n\n          if (length > nextMeme + 1) {\n            setCurrentMeme(nextMeme + 1);\n\n            while (!meme[currentMeme].media && meme[currentMeme].media === '') {\n              setCurrentMeme(nextMeme + 1);\n            }\n          } else {\n            setMeme(shuffle(meme));\n            setCurrentMeme(0);\n          }\n        } else {\n          setDisplayCurrent(true);\n\n          if (length > currentMeme + 1) {\n            setNextMeme(currentMeme + 1);\n\n            while (!meme[nextMeme].media && meme[nextMeme].media === '') {\n              setCurrentMeme(nextMeme + 1);\n            }\n          } else {\n            setMeme(shuffle(meme));\n            setNextMeme(0);\n          }\n        }\n\n        setSeconds(CLOCK);\n      }\n    }, 1000);\n  }, [seconds]);\n  useEffect(() => {\n    console.log(meme);\n  }, [meme]);\n\n  function shuffle(array) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  const getData = () => {\n    fetch(\"/members\").then(res => res.json()).then(data => {\n      setLength(Object.keys(data.title).length);\n      let shuffleMeme = [];\n\n      for (var i = 0; i < Object.keys(data.title).length; i++) {\n        //   setMeme(preState => [\n        //     ...preState, {media:data.media['?',i],\n        //   score:data.score['?',i],\n        // title:data.title['?',i]}\n        //   ])\n        shuffleMeme.push({\n          media: data.media[('?', i)],\n          score: data.score[('?', i)],\n          title: data.title[('?', i)]\n        });\n      }\n\n      setMeme(shuffle(shuffleMeme));\n    });\n  };\n\n  const updateData = () => {\n    fetch(\"/updateMeme\");\n  };\n\n  useEffect(() => {\n    const currentTime = new Date().getTime(); //current unix timestamp\n\n    const execTime = new Date().setHours(18, 21, 0, 0); //API call time = today at 20:00\n\n    let timeLeft;\n\n    if (currentTime < execTime) {\n      //it's currently earlier than 20:00\n      timeLeft = execTime - currentMeme;\n    } else {\n      //it's currently later than 20:00, schedule for tomorrow at 20:00\n      timeLeft = execTime + WEEK_IN_MS - currentTime;\n    }\n\n    setTimeout(function () {\n      setInterval(function () {\n        updateData();\n        setTimeout(function () {\n          getData();\n        }, TEN_MIN_IN_MS);\n      }, WEEK_IN_MS); //repeat every 24h\n    }, timeLeft); //wait until 20:00 as calculated above\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [meme[currentMeme + 1] ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: displayCurrent ? null : {\n            display: 'none'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: meme[currentMeme].title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"current meme\",\n            src: meme[currentMeme].media,\n            onError: e => {\n              setCurrentMeme(currentMeme + 1);\n              console.log(\"error img\");\n              e.target.onerror = null;\n              e.target.src = meme[currentMeme].media;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: displayCurrent ? {\n            display: 'none'\n          } : null,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: meme[nextMeme].title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"next meme\",\n            src: meme[nextMeme].media,\n            onError: e => {\n              setNextMeme(nextMeme + 1);\n              console.log(\"error img\");\n              e.target.onerror = null;\n              e.target.src = meme[nextMeme].media;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 36\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"timer\",\n        children: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"h4TEE/uh0neNBMsZEpcr2Feixmo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kevii/Desktop/memeApp/my-app/src/App.js"],"names":["React","useState","useEffect","App","meme","setMeme","currentMeme","setCurrentMeme","nextMeme","setNextMeme","seconds","setSeconds","displayCurrent","setDisplayCurrent","length","setLength","CLOCK","WEEK_IN_MS","TEN_MIN_IN_MS","getData","setTimeout","media","shuffle","console","log","array","currentIndex","randomIndex","Math","floor","random","fetch","then","res","json","data","Object","keys","title","shuffleMeme","i","push","score","updateData","currentTime","Date","getTime","execTime","setHours","timeLeft","setInterval","display","e","target","onerror","src"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\n\n\nfunction App() {\n  const [meme,setMeme] = useState([])\n  const [currentMeme,setCurrentMeme] = useState(2)\n  const [nextMeme,setNextMeme] = useState(currentMeme+1)\n  const [seconds,setSeconds] = useState(15)\n  const [displayCurrent, setDisplayCurrent] = useState(true)\n  const [length,setLength] = useState()\n  const CLOCK = 15\n  const WEEK_IN_MS = 604800000\n  const TEN_MIN_IN_MS = 600000\n\n  useEffect(() => {\n      getData()\n  },[])\n\n  useEffect(() => {\n    setTimeout(() => {\n      if(seconds!==0){\n      setSeconds(seconds-1)}\n      else{\n        if(displayCurrent){\n          setDisplayCurrent(false)\n          if(length>(nextMeme+1)){\n\n            setCurrentMeme(nextMeme+1)\n            while(!meme[currentMeme].media && meme[currentMeme].media===''){\n              setCurrentMeme(nextMeme+1)\n            }\n          \n          }\n          else{\n            setMeme(shuffle(meme))\n            setCurrentMeme(0)\n          }\n\n        }\n        else{\n          setDisplayCurrent(true)\n          if(length>(currentMeme+1)){\n            setNextMeme(currentMeme+1)\n            while(!meme[nextMeme].media && meme[nextMeme].media===''){\n              setCurrentMeme(nextMeme+1)\n            }\n          \n          }\n          else{\n            setMeme(shuffle(meme))\n            setNextMeme(0)\n          }\n        }\n        setSeconds(CLOCK)\n        \n      }\n    }, 1000);\n    \n  }, [seconds])\n\n  useEffect(()=>{\n    console.log(meme)\n  },[meme])\n\n  function shuffle(array) {\n    let currentIndex = array.length\n    let randomIndex\n\n    while (currentIndex != 0) {\n\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    \n    return array\n      \n    }\n\n    const getData = () => {\n      fetch(\"/members\").then(\n        res => res.json()\n      )\n      .then(data => {\n        setLength(Object.keys(data.title).length)\n        let shuffleMeme = []\n        for (var i =0; i<Object.keys(data.title).length; i++){\n      //   setMeme(preState => [\n      //     ...preState, {media:data.media['?',i],\n      //   score:data.score['?',i],\n      // title:data.title['?',i]}\n      //   ])\n  \n          shuffleMeme.push({media:data.media['?',i],\n             score:data.score['?',i],\n           title:data.title['?',i]})\n  \n  \n      }\n      setMeme(shuffle(shuffleMeme))\n      })\n    }\n\n    const updateData = () => {\n      fetch(\"/updateMeme\")\n    }\n\n    useEffect(() => {\n\n      const currentTime = new Date().getTime();  //current unix timestamp\n      const execTime = new Date().setHours(18,21,0,0);  //API call time = today at 20:00\n      let timeLeft;\n      if(currentTime < execTime) {\n        //it's currently earlier than 20:00\n        timeLeft = execTime - currentMeme;\n      } else {\n        //it's currently later than 20:00, schedule for tomorrow at 20:00\n        timeLeft = execTime + WEEK_IN_MS - currentTime\n      }\n      setTimeout(function() {\n        setInterval(function() {\n          updateData()\n          setTimeout(function() {\n            getData()\n          }, TEN_MIN_IN_MS)\n    \n        }, WEEK_IN_MS);  //repeat every 24h\n      }, timeLeft);  //wait until 20:00 as calculated above\n    },[])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      {meme[currentMeme+1]?        <div>\n\n        <div style={displayCurrent?null:{display:'none'}}>\n            <h3>{meme[currentMeme].title}</h3>\n            <img alt=\"current meme\" src={meme[currentMeme].media} onError={(e) => {\n              setCurrentMeme(currentMeme+1)\n              console.log(\"error img\")\n              e.target.onerror = null\n              e.target.src=meme[currentMeme].media\n            }}></img>\n            </div>\n\n            <div style={displayCurrent?{display:'none'}:null}>\n            <h3>{meme[nextMeme].title}</h3>\n            <img alt=\"next meme\" src={meme[nextMeme].media} onError={(e) => {\n              setNextMeme(nextMeme+1)\n              console.log(\"error img\")\n              e.target.onerror = null\n              e.target.src=meme[nextMeme].media\n            }}></img>\n            </div>\n          </div>:null}\n        <span className=\"timer\">{seconds}</span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}